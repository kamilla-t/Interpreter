// COMP712 -- Programming Languages
// Some tests for the interpreter of the AJS language
// Note: students may want to provide additional tests
// 

//=========================
// Simple arithmetic tests
//=========================

345;

123 + 45;

1000 - 482;

5 * 35;

10 / 4;

9.5 + 22;

(3 * 5) + (10 -4);

1 - 5 / 2 * 4 + 3;

3 * 2 * (5 + 1 - 2);


//============================
// Test constant declarations
//============================

const size = 5;
size;
5 * size;

const pi = 3.14159;
const radius = 10;
pi * radius * radius;

const circumference = 2 * pi * radius;
circumference;


//============================
// Test function declarations
//============================

function square(x) {
    return x * x;
}

square(21);
square(4 + 2);
square(3) + square(4);


//============================
// Test compound functions
//============================

square(square(3));

function sum_of_squares(x, y) {
    return square(x) + square(y);
}

function f(a) {
    return( sum_of_squares(a + 1, a * 2));
}

f(5);


//===============================
// Test booleans and conditionals
//===============================

(3 > 2) && (5 < 9);
(3 > 2) && (5 > 9);
(3 > 2) || (5 > 9);
(3 < 2) || (5 < 9);

function abs(x) {
    return x >= 0 ? x : -x;
}

abs(6);
abs(-5);
abs(0);

function abs2(x) {
    return x > 0
	       ? x
		   : x === 0
		   ? 0
		   : -x;
}

abs2(10);
abs2(-33);
abs2(0);

function close_enough(x, y) {
    return abs(x - y) < 0.001;
}

close_enough(12.0003, 12);
close_enought(12.1, 12);


//==========================
// Test recursive function
//==========================

function factorial(n) {
    return n === 1
	       ? 1
		   : n * factorial(n - 1);
}

factorial(4);
factorial(8);
		   

function fib(n) {
    return n === 0
	       ? 0
		   : n === 1
		   ? 1
		   : fib(n - 1) + fib(n - 2);
}

fib(4);
fib(8);

